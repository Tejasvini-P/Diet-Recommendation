import cv2
import matplotlib.pyplot as plt
from PIL import Image
from ultralytics import YOLO
import pandas as pd
import os

# ---------------- Diet Logic ---------------- #
def calculate_bmr(weight, height, age, gender):
    if gender.lower() == 'male':
        bmr = 10 * weight + 6.25 * height - 5 * age + 5
    else:  # female
        bmr = 10 * weight + 6.25 * height - 5 * age - 161
    return bmr

def calculate_tdee(bmr, activity_level):
    activity_factors = {
        'sedentary': 1.2,
        'light': 1.375,
        'moderate': 1.55,
        'active': 1.725,
        'very active': 1.9
    }
    return bmr * activity_factors.get(activity_level.lower(), 1.2)

def get_calorie_goal(tdee, goal):
    if goal == 'weight loss':
        return tdee - 500
    elif goal == 'weight gain':
        return tdee + 500
    else:
        return tdee

def suggest_macros(calories, goal):
    if goal == 'weight loss':
        protein = 0.3 * calories
        carbs = 0.4 * calories
        fats = 0.3 * calories
    elif goal == 'weight gain':
        protein = 0.25 * calories
        carbs = 0.5 * calories
        fats = 0.25 * calories
    else:
        protein = 0.3 * calories
        carbs = 0.4 * calories
        fats = 0.3 * calories

    return protein / 4, carbs / 4, fats / 9

# ---------------- Computer Vision Logic ---------------- #

# Nutrition table: simplified food to macros (replace with full DB later)
nutrition_db = {
    "apple": {"calories": 95, "protein": 0.5, "carbs": 25, "fats": 0.3},
    "banana": {"calories": 105, "protein": 1.3, "carbs": 27, "fats": 0.3},
    "pizza": {"calories": 285, "protein": 12, "carbs": 36, "fats": 10},
    "burger": {"calories": 354, "protein": 17, "carbs": 29, "fats": 17},
    "salad": {"calories": 150, "protein": 3, "carbs": 10, "fats": 10},
    "chicken": {"calories": 239, "protein": 27, "carbs": 0, "fats": 14},
}

def analyze_food_image(image_path):
    model = YOLO("yolov8n.pt")  # Use pretrained general YOLOv8 model (not food-specific)
    results = model(image_path)[0]

    img = cv2.imread(image_path)
    total_nutrition = {"calories": 0, "protein": 0, "carbs": 0, "fats": 0}

    for result in results.boxes.data.tolist():
        x1, y1, x2, y2, conf, cls = result
        label = model.names[int(cls)]
        label = label.lower()

        if label in nutrition_db:
            macros = nutrition_db[label]
            total_nutrition["calories"] += macros["calories"]
            total_nutrition["protein"] += macros["protein"]
            total_nutrition["carbs"] += macros["carbs"]
            total_nutrition["fats"] += macros["fats"]

            # Draw box
            cv2.rectangle(img, (int(x1), int(y1)), (int(x2), int(y2)), (0, 255, 0), 2)
            cv2.putText(img, label, (int(x1), int(y1)-10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0,255,0), 2)

    # Show image
    cv2.imshow("Detected Food", img)
    cv2.waitKey(0)
    cv2.destroyAllWindows()

    return total_nutrition

# ---------------- Main ---------------- #
def main():
    print("=== Diet Recommendation System ===")

    age = int(input("Enter your age (years): "))
    gender = input("Enter your gender (male/female): ").strip().lower()
    weight = float(input("Enter your weight (kg): "))
    height = float(input("Enter your height (cm): "))

    print("\nSelect your activity level:")
    print("Options: sedentary, light, moderate, active, very active")
    activity_level = input("Enter activity level: ").strip().lower()

    print("\nSelect your goal:")
    print("Options: weight loss, maintenance, weight gain")
    goal = input("Enter your goal: ").strip().lower()

    bmr = calculate_bmr(weight, height, age, gender)
    tdee = calculate_tdee(bmr, activity_level)
    calorie_goal = get_calorie_goal(tdee, goal)
    protein_goal, carb_goal, fat_goal = suggest_macros(calorie_goal, goal)

    print("\n=== Your Daily Nutrition Recommendation ===")
    print(f"Calories: {calorie_goal:.0f} kcal")
    print(f"Protein: {protein_goal:.0f} g")
    print(f"Carbohydrates: {carb_goal:.0f} g")
    print(f"Fats: {fat_goal:.0f} g")

    # ---------------- Analyze Food Image ---------------- #
    print("\nDo you want to analyze a food image? (y/n)")
    choice = input().strip().lower()
    if choice == 'y':
        image_path = input("Enter the path to your food image: ").strip()
        if os.path.exists(image_path):
            print("\nAnalyzing image...")
            food_macros = analyze_food_image(image_path)

            print("\n=== Food Image Nutrition Summary ===")
            print(f"Estimated Calories: {food_macros['calories']} kcal")
            print(f"Protein: {food_macros['protein']} g")
            print(f"Carbs: {food_macros['carbs']} g")
            print(f"Fats: {food_macros['fats']} g")

            # Compare with goal
            print("\n=== Intake Recommendation ===")
            if food_macros["calories"] > calorie_goal * 0.4:
                print("⚠️ This food is high in calories. Consume in moderation.")
            elif food_macros["protein"] < 5:
                print("⚠️ Low protein content. Consider pairing with a protein-rich item.")
            else:
                print("✅ This food fits well within your nutritional goals.")
        else:
            print("❌ Image path not found.")

if __name__ == "__main__":
    main()